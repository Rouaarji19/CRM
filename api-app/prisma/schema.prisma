// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  isClient   Boolean   @default(true)
  Employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId Int?
  Client     Client?   @relation(fields: [clientId], references: [id])
  clientId   Int?
}

model Employee {
  id        Int      @id @default(autoincrement())
  cin       String   @unique
  nom       String
  prenom    String
  adresse   String
  email     String
  telephone String
  role      Role     @default(admin)
  equipe    Equipe[]
  user      User[]
  Member    Member[]
}

model Equipe {
  id           Int           @id @default(autoincrement())
  nom_equipe   String
  nombre       Int
  chef         Employee      @relation(fields: [chefId], references: [id])
  chefId       Int // Clé étrangère vers l'id de l'entité Admin
  opportunites Opportunite[] // Relation avec l'entité Opportunite
  Member       Member[]
}

model Member {
  equipeId   Int
  equipe     Equipe   @relation(fields: [equipeId], references: [id])
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@unique([equipeId, employeeId])
}

// Définition de l'entité Admin

model Client {
  id          Int              @id @default(autoincrement())
  nom         String
  prenom      String
  email       String
  adresse     String
  telephone   Int
  password    String
  image       String?
  categorie   CategorieClient? @relation(fields: [categorieId], references: [id])
  categorieId Int?
  devis       devis[]
  rendezvous  rendezvous[]
  stages      StageClient[]
  user        User[]
}

model CategorieClient {
  id          Int      @id @default(autoincrement())
  nom         String
  description String
  clients     Client[]
}

model Opportunite {
  id       Int     @id @default(autoincrement())
  title    String
  equipe   Equipe  @relation(fields: [equipeId], references: [id])
  equipeId Int
  stage    Stage[]
}

model Stage {
  id            Int           @id @default(autoincrement())
  nom           String
  Opportunite   Opportunite?  @relation(fields: [opportuniteId], references: [id])
  opportuniteId Int
  StageClient   StageClient[]
}

model StageClient {
  id          Int       @id @default(autoincrement())
  description String
  Client      Client?   @relation(fields: [clientId], references: [id])
  clientId    Int?
  Stage       Stage?    @relation(fields: [stageId], references: [id])
  stageId     Int?
  Comment     Comment[]
}

model Comment {
  id            Int         @id @default(autoincrement())
  stageClient   StageClient @relation(fields: [stageClientId], references: [id])
  stageClientId Int
}

model devis {
  id              Int      @id @default(autoincrement())
  numero_devis    Int
  date_estimation DateTime
  montant_total   Float
  prix_unitaire   Float
  service         String
  TVA             Float
  client          Client   @relation(fields: [clientId], references: [id])
  clientId        Int // Clé étrangère vers l'id de l'entité Client
}

model rendezvous {
  id          Int      @id @default(autoincrement())
  telephone   Int
  email       String
  temps       DateTime
  date        DateTime
  description String
  client      Client   @relation(fields: [clientId], references: [id])
  clientId    Int // Clé étrangère vers l'id de l'entité Admin
}

model Vente {
  id                Int      @id @default(autoincrement())
  nom               String
  prix              Float
  lieu              String
  image             String // Chemin de l'image dans le système de fichiers
  description       String
  date_vente        DateTime
  nom_vendeur       String
  telephone_vendeur Int
}

model Location {
  id                Int      @id @default(autoincrement())
  nom               String
  prix              Float
  lieu              String
  image             String // Chemin de l'image dans le système de fichiers
  description       String
  nom_vendeur       String
  telephone_vendeur Int
  date_debut        DateTime // Date de début de la location
  date_fin          DateTime // Date de fin de la location
}

enum Role {
  admin
  chef
  commercial
}
